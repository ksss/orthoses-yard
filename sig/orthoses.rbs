# GENERATED FILE

# use Orthoses::YARD, parse: "lib/**/*.rb"
class Orthoses::YARD
  # @param loader
  # @param [<String>, String] parse Target files
  # @param [Boolean] use_cache Use cache .yardoc
  # @param [Symbol, nil] log_level Set YARD log level
  # @param [Boolean] allow_empty_doc Generate RBS also from empty doc
  def initialize: (untyped loader, parse: Array[String] | String, ?use_cache: bool, ?log_level: Symbol?, ?allow_empty_doc: bool) -> void
  # @return [void]
  def call: () -> void
end

class Orthoses::YARD::YARD2RBS
  # @return [YARD::CodeObjects::t]
  attr_reader yardoc: untyped
  # @return [Proc]
  attr_reader block: Proc
  # @return [RBS::Types::Bases::Any]
  attr_reader untyped: RBS::Types::Bases::Any
  # @return [RBS::Types::Bases::Void]
  attr_reader void: RBS::Types::Bases::Void
  # @return [RBS::Types::Bases::Bool]
  attr_reader bool: RBS::Types::Bases::Bool
  # @return [void]
  def run: () -> void
  # @return [RBS::Types::t]
  def tag_types_to_rbs_type: (untyped tag_types) -> untyped
  # @return [void]
  private def generate_for_attributes: () -> void
  # @return [void]
  private def generate_for_methods: () -> void
  # @return [void]
  private def generate_for_constants: () -> void
  # @return [void]
  private def generate_for_classvariable: () -> void
  # @return [Array<RBS::Types::t>]
  private def recursive_resolve: (untyped types_explainer_types) -> untyped
  # @return [Array<RBS::Types::Bases::Any>]
  private def temporary_type_params: (untyped name) -> Array[RBS::Types::Bases::Any]
end
